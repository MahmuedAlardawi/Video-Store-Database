CPCS-241 FINAL LAB:
MAHMUED ALARDAWI - 2135209 - CS1
----------------------------------------------------------------------


PART (1a/b) User: 

ENTER USER: SYS AS SYSDBA;
ENETR PASSWORD: SYS;

CREATE USER C##VIDEO_RENTAL IDENTIFIED BY PASS1 CONTAINER=ALL;

GRANT ALL PRIVILEGES TO C##VIDEO_RENTAL;

CONN C##VIDEO_RENTAL;
ENTER PASSWORD: PASS1;

----------------------------------------------------------------------

PART (2a) Tables:

CREATE TABLE VIDEOS_CATAGORY (
    VCAT_ID NUMBER(9) PRIMARY KEY,
    VCAT_NAME VARCHAR2(300) NOT NULL,
    VCAT_DESCRIPTION VARCHAR2(1000)
);

CREATE TABLE VIDEOS (
    V_ID NUMBER(9) PRIMARY KEY, 
    V_NAME VARCHAR2(300) NOT NULL,
    V_DESCRIPTION VARCHAR2(1000),
    VCAT_ID NUMBER(9),
    FOREIGN KEY (VCAT_ID) REFERENCES VIDEOS_CATAGORY (VCAT_ID)
);

CREATE TABLE VIDEO_COPIES (
    VCOP_ID NUMBER(9) PRIMARY KEY,
    VCOP_PURCHASED DATE,
    VCOP_STATUS VARCHAR2(1000),
    V_ID NUMBER(9),
    VCOP_RENT NUMBER NOT NULL,
    FOREIGN KEY (V_ID) REFERENCES VIDEOS (V_ID)
);

CREATE TABLE CUSTOMERS (
    C_ID  NUMBER(9) PRIMARY KEY,
    C_NAME VARCHAR2(300) NOT NULL,
    C_TYPE VARCHAR2(30),
    C_NAT_ID VARCHAR2(20) NOT NULL UNIQUE
);

CREATE TABLE RENTAL (
    R_ID NUMBER(9) PRIMARY KEY,
    V_ID NUMBER(9),
    C_ID NUMBER(9),
    R_START_DATE DATE,
    R_END_DATE DATE,
    R_RENT NUMBER(9),
    FOREIGN KEY (V_ID) REFERENCES VIDEOS (V_ID),
    FOREIGN KEY (C_ID) REFERENCES CUSTOMERS (C_ID)
);


PART (2b) Tables:

CREATE SEQUENCE SEQ
MINVALUE 0
START WITH 0
INCREMENT BY 1;

----------------------------------------------------------------------

EXTRA (1): TO SHOW TABLES COLUMNS

DESCRIBE VIDEOS;
DESCRIBE VIDEOS_CATAGORY;
DESCRIBE VIDEO_COPIES;
DESCRIBE CUSTOMERS;
DESCRIBE RENTAL;

----------------------------------------------------------------------

PART (3) Video Category:

INSERT INTO VIDEOS_CATAGORY
VALUES (SEQ.NEXTVAL, 'Action', 'Action films are built around a core set of characteristics: 
spectacular physical action; a narrative emphasis on fights, chases, and explosions; and
a combination of state-of-the-art special effects and stunt-work.');

INSERT INTO VIDEOS_CATAGORY
VALUES (SEQ.NEXTVAL, 'Adventure', 'What is the meaning of adventure movie?
A common theme of adventure films is of characters leaving their home or place of comfort and
going to fulfill a goal, embarking on travels, quests, treasure hunts, heroic journeys; and
explorations or searches for the unknown. Subgenres of adventure films include swashbuckler 
films, pirate films, and survival films.');

----------------------------------------------------------------------

EXTRA (2): SHOW VIDEOS_CATAGORY ROWS

SELECT *
FROM VIDEOS_CATAGORY;

----------------------------------------------------------------------

PART (4) New Video:

CREATE OR REPLACE PROCEDURE NEW_V (V_NAME0 VARCHAR2, VCAT_NAME0 VARCHAR2, VCOP_STATUS0 VARCHAR2, VCOP_RENT0 NUMBER, STATUS OUT VARCHAR2) IS 
V_CHECK VARCHAR2(300);
V_ID1 NUMBER(9);
VCAT_ID1 NUMBER(9);

BEGIN
SELECT 'X' INTO V_CHECK FROM VIDEOS WHERE V_NAME = V_NAME0;
DBMS_OUTPUT.PUT_LINE ('ALREADY EXISTS');

EXCEPTION WHEN NO_DATA_FOUND THEN
SELECT VCAT_ID INTO VCAT_ID1 FROM VIDEOS_CATAGORY WHERE VCAT_NAME = VCAT_NAME0;
INSERT INTO VIDEOS VALUES (SEQ.NEXTVAL, V_NAME0, NULL, VCAT_ID1);

SELECT V_ID INTO V_ID1 FROM VIDEOS WHERE V_NAME = V_NAME0;
INSERT INTO VIDEO_COPIES VALUES (SEQ.NEXTVAL, NULL, VCOP_STATUS0, V_ID1, VCOP_RENT0);

STATUS := 'VIDEOS ADD';
END;
/

OR ---

DECLARE
V_CHECK VARCHAR2(300);
V_ID1 NUMBER(9);
VCAT_ID1 NUMBER(9);

PROCEDURE NEW_V (V_NAME0 VARCHAR2, VCAT_NAME0 VARCHAR2, VCOP_STATUS0 VARCHAR2, 
VCOP_RENT0 NUMBER) IS 
BEGIN
SELECT 'X' INTO V_CHECK FROM VIDEOS WHERE V_NAME = V_NAME0;
DBMS_OUTPUT.PUT_LINE ('ALREADY EXISTS');

EXCEPTION WHEN NO_DATA_FOUND THEN
SELECT VCAT_ID INTO VCAT_ID1 FROM VIDEOS_CATAGORY WHERE VCAT_NAME = VCAT_NAME0;
INSERT INTO VIDEOS VALUES (SEQ.NEXTVAL, V_NAME0, NULL, VCAT_ID1);

SELECT V_ID INTO V_ID1 FROM VIDEOS WHERE V_NAME = V_NAME0;
INSERT INTO VIDEO_COPIES VALUES (SEQ.NEXTVAL, NULL, VCOP_STATUS0, V_ID1, VCOP_RENT0);
END;
/

BEGIN
DBMS_OUTPUT.PUT_LINE ('PROCEDURE READY');
END;
/

----------------------------------------------------------------------

PART (5) Videos:

DECLARE
STATUS VARCHAR2(1000);
BEGIN
NEW_V ('James Bond', 'Action', 'Two copies', 10, STATUS);
NEW_V ('Indiana Jones', 'Adventure', 'Two copies', 10, STATUS);
DBMS_OUTPUT.PUT_LINE(STATUS);
END;
/

OR ---

DECLARE
V_CHECK VARCHAR2(300);
V_ID1 NUMBER(9);
VCAT_ID1 NUMBER(9);

PROCEDURE NEW_V (V_NAME0 VARCHAR2, VCAT_NAME0 VARCHAR2, VCOP_STATUS0 VARCHAR2, 
VCOP_RENT0 NUMBER) IS 
BEGIN
SELECT 'X' INTO V_CHECK FROM VIDEOS WHERE V_NAME = V_NAME0;
DBMS_OUTPUT.PUT_LINE ('ALREADY EXISTS');

EXCEPTION WHEN NO_DATA_FOUND THEN
SELECT VCAT_ID INTO VCAT_ID1 FROM VIDEOS_CATAGORY WHERE VCAT_NAME = VCAT_NAME0;
INSERT INTO VIDEOS VALUES (SEQ.NEXTVAL, V_NAME0, NULL, VCAT_ID1);

SELECT V_ID INTO V_ID1 FROM VIDEOS WHERE V_NAME = V_NAME0;
INSERT INTO VIDEO_COPIES VALUES (SEQ.NEXTVAL, NULL, VCOP_STATUS0, V_ID1, VCOP_RENT0);
END;
/

BEGIN
NEW_V ('James Bond', 'Action', 'Two copies', 10);
NEW_V ('Indiana Jones', 'Adventure', 'Two copies', 10);
DBMS_OUTPUT.PUT_LINE('VIDEOS ADD');
END;
/

----------------------------------------------------------------------

PART (6) Customer:

CREATE OR REPLACE PROCEDURE NEW_C (C_NAME0 VARCHAR2, C_NAT_ID0 VARCHAR2, 
STATUS OUT VARCHAR2) IS 
C_CHECK VARCHAR2(300);
C_ID1 NUMBER(9);

BEGIN
SELECT 'X' INTO C_CHECK FROM CUSTOMERS WHERE C_NAME = C_NAME0;
DBMS_OUTPUT.PUT_LINE ('ALREADY EXISTS');

EXCEPTION WHEN NO_DATA_FOUND THEN
INSERT INTO CUSTOMERS VALUES (SEQ.NEXTVAL, C_NAME0, 'NEW', C_NAT_ID0);

STATUS := 'CUSTOMER ADD';
END;
/

DECLARE
STATUS VARCHAR2(1000);
BEGIN
NEW_C('Abdullah', 'NAT TYPE 2', STATUS);
DBMS_OUTPUT.PUT_LINE(STATUS);
END;
/

OR ---

DECLARE
C_CHECK VARCHAR2(300);

PROCEDURE NEW_C (C_NAME0 VARCHAR2, C_NAT_ID0 VARCHAR2) IS 
BEGIN
SELECT 'X' INTO C_CHECK FROM CUSTOMERS WHERE C_NAME = C_NAME0;
DBMS_OUTPUT.PUT_LINE ('ALREADY EXISTS');

EXCEPTION WHEN NO_DATA_FOUND THEN
INSERT INTO CUSTOMERS VALUES (SEQ.NEXTVAL, C_NAME0, 'LOCAL', C_NAT_ID0);
END;
/

BEGIN
NEW_C('Abdullah', 'NAT TYPE 2');
DBMS_OUTPUT.PUT_LINE('CUSTOMER ADD');
END;
/

----------------------------------------------------------------------

PART (7a) Rental:

CREATE OR REPLACE PROCEDURE NEW_R (V_NAME0 VARCHAR2, C_NAME0 VARCHAR2, R_START_DATE0 DATE, 
STATUS OUT VARCHAR2) IS 
V_ID1 NUMBER(9);
C_ID1 NUMBER(9);
VCOP_RENT1 NUMBER;

BEGIN
SELECT V_ID INTO V_ID1 FROM VIDEOS WHERE V_NAME = V_NAME0;
SELECT VCOP_RENT INTO VCOP_RENT1 FROM VIDEO_COPIES WHERE V_ID = V_ID1;
SELECT C_ID INTO C_ID1 FROM CUSTOMERS WHERE C_NAME = C_NAME0;

INSERT INTO RENTAL 
VALUES (SEQ.NEXTVAL, V_ID1, C_ID1, R_START_DATE0, NULL, VCOP_RENT1);
STATUS := 'RENTAL ADD';

EXCEPTION WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('CUSTOMER OR VIDEO DOES NOT EXIST');

END;
/

DECLARE
STATUS VARCHAR2(1000);
BEGIN
NEW_R ('Indiana Jones', 'Abdullah', '2023-06-07' ,STATUS);
DBMS_OUTPUT.PUT_LINE(STATUS);
END;
/

OR ---

DECLARE
I_CHECK VARCHAR2(300);
R_ID1 NUMBER(9);
V_ID1 NUMBER(9);
C_ID1 NUMBER(9);

PROCEDURE NEW_R (V_NAME0 VARCHAR2, C_NAME0 VARCHAR2, R_RENT0 NUMBER) IS 
BEGIN
SELECT V_ID INTO V_ID1 FROM VIDEOS WHERE V_NAME = V_NAME0;
SELECT C_ID INTO C_ID1 FROM CUSTOMERS WHERE C_NAME = C_NAME0;

INSERT INTO RENTAL 
VALUES (SEQ.NEXTVAL, V_ID1, C_ID1, NULL, NULL, R_RENT0);

EXCEPTION WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('CUSTOMER OR VIDEO DOES NOT EXIST');
END;
/

BEGIN
NEW_R ('Indiana Jones', 'Abdullah', 1);
DBMS_OUTPUT.PUT_LINE('RENTAL ADD');
END;
/

----------------------------------------------------------------------

EXTRA (3)

SELECT * FROM RENTAL

----------------------------------------------------------------------

PART (7b) Rental: 

CREATE OR REPLACE PROCEDURE CLOSE_T (R_ID0 NUMBER, R_END_DAT0 DATE, STATUS OUT VARCHAR) IS
R_CHECK VARCHAR2(300);
R_RENT1 NUMBER;

BEGIN
SELECT 'X' INTO R_CHECK FROM RENTAL WHERE R_ID = R_ID0;

UPDATE RENTAL
SET R_END_DATE =  R_END_DAT0
WHERE R_ID = R_ID0;

STATUS := 'TRANSACTION CLOSED';

SELECT R_RENT INTO R_RENT1 FROM RENTAL WHERE R_ID = R_ID0;
DBMS_OUTPUT.PUT_LINE('TRANSACTION PRICE = '||R_RENT1||'SR');

EXCEPTION WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('RENTAL DOES NOT EXIST');
END;
/

DECLARE
STATUS VARCHAR2(1000);
BEGIN
CLOSE_T (8, '2023-07-10', STATUS);
DBMS_OUTPUT.PUT_LINE(STATUS);
END;
/

----------------------------------------------------------------------

PART (8a) Reports:
SELECT VIDEOS.V_ID, VIDEOS.V_NAME, VIDEOS_CATAGORY.VCAT_NAME, VIDEO_COPIES.VCOP_STATUS
FROM VIDEOS, VIDEOS_CATAGORY, VIDEO_COPIES
WHERE VIDEOS.VCAT_ID = VIDEOS_CATAGORY.VCAT_ID AND VIDEOS.V_ID = VIDEO_COPIES.V_ID;

PART (8b) Reports:
SELECT * FROM CUSTOMERS;

PART (8c) Reports:
SELECT RENTAL.R_ID, CUSTOMERS.C_ID, CUSTOMERS.C_NAME, VIDEOS.V_ID, VIDEOS.V_NAME, RENTAL.R_START_DATE, RENTAL.R_END_DATE, VIDEO_COPIES.VCOP_RENT
FROM RENTAL, CUSTOMERS, VIDEOS, VIDEO_COPIES
WHERE RENTAL.C_ID = CUSTOMERS.C_ID AND RENTAL.V_ID = VIDEOS.V_ID;

PART (8d) Reports: 
SELECT *
FROM RENTAL
ORDER BY R_END_DATE;




